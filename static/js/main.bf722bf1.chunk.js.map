{"version":3,"sources":["images/banner1.png","images/banner2.png","images/banner3.png","images/plandetrabajo.pdf","components/Back1.js","components/Back2.js","components/Back3.js","components/Back4.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Back1","react_default","a","createElement","Container","fluid","Row","Col","xs","id","Image","src","banner1","alt","Back2","banner2","Back3","banner3","Back4","Button","variant","size","block","href","plandetrabajo","download","App","react","src_components_Back1","src_components_Back2","src_components_Back3","src_components_Back4","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yTCmBzBC,EAdD,kBACVC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,OAAO,GAChBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAG,MACdR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,IAAKC,IACLC,IAAI,oBACJR,OAAK,iCCOFS,EAdD,kBACZb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,OAAO,GAChBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAG,MACdR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,IAAKI,IACLF,IAAI,oBACJR,OAAK,iCCOAW,EAdD,kBACZf,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,OAAO,GAChBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAG,MACdR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,IAAKM,IACLJ,IAAI,oBACJR,OAAK,yCCKAa,EAZD,kBACZjB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,OAAO,GAChBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAG,MAChBR,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,OAAK,GACvCrB,EAAAC,EAAAC,cAAA,KAAGoB,KAAMC,IAAeC,UAAQ,GAAhC,oCCQOC,EAVI,WACjB,OACEzB,EAAAC,EAAAC,cAACwB,EAAA,SAAD,KACE1B,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC0B,EAAD,MACA5B,EAAAC,EAAAC,cAAC2B,EAAD,MACA7B,EAAAC,EAAAC,cAAC4B,EAAD,gBCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACPrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,KACEtC,EAAAC,EAAAC,cAACqC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bf722bf1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner1.f1f28e27.png\";","module.exports = __webpack_public_path__ + \"static/media/banner2.b28b8943.png\";","module.exports = __webpack_public_path__ + \"static/media/banner3.e9e98851.png\";","module.exports = __webpack_public_path__ + \"static/media/plandetrabajo.a20d3c46.pdf\";","import React from \"react\";\nimport './Back1.css';\nimport banner1 from '../images/banner1.png';\nimport { Container, Row, Col, Image } from 'react-bootstrap';\n\nconst Back1 = () => (\n    <Container fluid={true}>\n      <Row>\n        <Col xs={12} id=\"b1\">\n          <Image\n            src={banner1}\n            alt=\"CriolloSomosTodos\"\n            fluid\n          />\n        </Col>\n      </Row>\n    </Container>\n);\n\nexport default Back1;\n","import React from \"react\";\nimport './Back2.css';\nimport { Container, Row, Col, Image } from 'react-bootstrap';\nimport banner2 from '../images/banner2.png';\n\nconst Back2 = () => (\n  <Container fluid={true}>\n    <Row>\n      <Col xs={12} id=\"b2\">\n        <Image\n          src={banner2}\n          alt=\"CriolloSomosTodos\"\n          fluid\n        />\n      </Col>\n    </Row>\n  </Container>\n);\n\nexport default Back2;\n","import React from \"react\";\nimport './Back3.css';\nimport { Container, Row, Col, Image } from 'react-bootstrap';\nimport banner3 from '../images/banner3.png';\n\nconst Back3 = () => (\n  <Container fluid={true}>\n    <Row>\n      <Col xs={12} id=\"b3\">\n        <Image\n          src={banner3}\n          alt=\"CriolloSomosTodos\"\n          fluid\n        />\n      </Col>\n    </Row>\n  </Container>\n);\n\nexport default Back3;\n","import React from \"react\";\nimport './Back4.css';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport plandetrabajo from '../images/plandetrabajo.pdf'\n\nconst Back4 = () => (\n  <Container fluid={true}>\n    <Row>\n      <Col xs={12} id=\"b4\">\n      <Button variant=\"success\" size=\"lg\" block>\n        <a href={plandetrabajo} download>Descarga mi plan de trabajo</a>\n      </Button>\n      </Col>\n    </Row>\n  </Container>\n);\n\nexport default Back4;\n","import React, {Fragment} from 'react';\n// import NavbarHome from './components/NavbarHome';\n// import Main from \"./components/Main\";\nimport Back1 from \"./components/Back1\";\nimport Back2 from \"./components/Back2\";\nimport Back3 from \"./components/Back3\";\nimport Back4 from \"./components/Back4\";\n\nexport const App = () => {\n  return (\n    <Fragment>\n      <Back1 />\n      <Back2 />\n      <Back3 />\n      <Back4 />\n    </Fragment>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}